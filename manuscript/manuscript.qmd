---
title: "The FAIRification of research in real-world evidence: A practical introduction to reproducible analytic workflows using Git and R"

code-fold: false
eval: false
echo: true
number-sections: true

format: 
  docx:
    reference-doc: custom-reference-doc.docx
    fig-cap-location: top

editor: visual
bibliography: references.bib
csl: pharmacoepidemiology-and-drug-safety.csl
---

```{r setup}
#| label: setup
#| include: false
#| eval: true
library(magick)
library(cowplot)
library(here)
```

**Authors**: Janick Weberpals^1^, Shirley V. Wang^1^

**Author affiliation**: ^1^Division of Pharmacoepidemiology and Pharmacoeconomics, Department of Medicine, Brigham and Women's Hospital, Harvard Medical School, Boston, MA

[**Correspondence:**]{.underline}

Janick Weberpals, RPh, PhD

Division of Pharmacoepidemiology and Pharmacoeconomics,

Department of Medicine, Brigham and Women's Hospital, Harvard Medical School,

1620 Tremont Street, Suite 3030-R, Boston, MA 02120, USA

Phone: 617-278-0932

Fax: 617-232-8602

Email: [jweberpals\@bwh.harvard.edu](mailto:jweberpals@bwh.harvard.edu)

[**Word count:**]{.underline} 4,293 words

[**Tables:**]{.underline} 0

[**Figures:**]{.underline} 6

[**Supplementary material:**]{.underline} Supplementary Appendix and Supplementary Figures (pdf)

[**Short running title**]{.underline}: FAIRification of research in real-world evidence

[**Keywords:**]{.underline} Transparency, Reproducibility, Git, R, Version control, Real-world evidence

[**Funding:**]{.underline} There was no specific funding for this manuscript.

[**Disclosures/COI:**]{.underline} Janick Weberpals and Shirley Wang report no conflicts of interest.

[Analytical code sharing statement:]{.underline} This manuscript was written using `Quarto` version 1.3.433 (<https://quarto.org/>) and R version 4.1.2. All materials can be found at <https://gitlab-scm.partners.org/drugepi/fair-epi> or <https://github.com/janickweberpals/fair-epi>. Detailed information on packages and versions can be found in the `renv.lock` file in the linked repository.

[**Acknowledgments:**]{.underline} None.

{{< pagebreak >}}

# Abstract {.unnumbered}

Transparency and reproducibility are major prerequisites for conducting meaningful real-world evidence (RWE) studies that are fit for decision-making. Many advances have been made in the documentation and reporting of study protocols and results, but the principles for version control and sharing of analytic code in RWE are not yet as established as in other quantitative disciplines like computational biology and health informatics. In this practical tutorial, we aim to give an introduction to distributed version control systems (VCS) tailored towards the FAIR (**F**indable, **A**ccessible, **I**nteroperable and **R**eproducible) implementation of RWE studies. To ease adoption, we provide detailed step-by-step instructions with practical examples on how the Git VCS and R programming language can be implemented into RWE study workflows to facilitate reproducible analyses. We further discuss and showcase how these tools can be used to track changes, collaborate, disseminate and archive RWE studies through dedicated project repositories that maintain a complete audit trail of all relevant study documents.

{{< pagebreak >}}

::: {.callout-note icon="false"}
## KEY POINTS

-   Transparency and reproducibility are major prerequisites for conducting meaningful real-world evidence (RWE) studies that are fit for decision-making.

-   Regulators, funding agencies and HTA bodies have increasing expectations regarding the provenance, audit trial and sharing of study documents including analytic code as a prerequisite for impactful and credible RWE studies.

-   Version control systems (VCS) for analytic code like Git, GitHub and GitLab have unique advantages for making analytic code and other relevant RWE study documents Findable, Accessible, Interoperable and Reproducible (FAIR).

-   In this manuscript, we discuss and demonstrate how VCS can be used to track changes over the course of a RWE project, collaborate, disseminate and archive analytic code and provide a technical step-by-step tutorial for the practical implementation of reproducible workflows using Git.

-   Given the trend towards open source tools for clinical trial reporting and regulatory submissions, this tutorial addresses a timely topic and aims to encourage new and experienced pharmacoepidemiologists to integrate VCS in their daily work and embrace the advantages of FAIR analytic code sharing.
:::

{{< pagebreak >}}

# Introduction

Real-world evidence (RWE) studies that make secondary use of routinely collected health data captured in electronic health records and claims are increasingly being used to inform drug development, regulatory and coverage decisions, as well as clinical practice.[@fdaRWE2018; @eichler2015; @cioms2023; @makady2017] Considering the impact that RWE studies can have on patient healthcare, transparent and reproducible conduct of RWE studies is critically important.

While many advances have been made in the documentation and reporting of study protocols and results[@wang2021; @schneeweiss2019; @berger2017; @wang2022], guidance on transparency regarding the actual implementation and analytic steps is still significantly lacking. Although in other quantitative disciplines such as computational biology[@almugbel2017; @mammoliti2021; @russell2018; @perez-riverol2016] or health informatics[@bakken2019], the sharing of code is rather the rule than the exception, this practice is not as common in the (pharmaco-) epidemiological community. As open source tools like R packages and Shiny dashboards[@pharmaverse2023] become increasingly used for clinical trial reporting and regulatory submissions[@positPharma], the adoption of version control and code sharing practices is a crucial and timely topic for the field of RWE.

Version control systems (VCS), such as *Git*, provide powerful tools to keep track of the versioning of important files and documents such as protocols, analytic code, tables and figures. Thereby, VCS can extend the principles of *FAIR* *data*[@garc√≠a-closas2023] to the implementation of pharmacoepidemiological study workflows by making all components of a study **F**indable, **A**ccessible, **I**nteroperable, and **R**eproducible (**FAIR**).

VCS enable researchers to track and resolve errors, collaborate with peers, and share resources instantaneously, for example, upon publication of a manuscript. By design, VCS workflows automatically empower users to comment, track and compare changes made to files and hence, increase the ability to comprehend the evolution of a project over time while maintaining a complete audit trail of changes to all documents.[@ram2013] Without VCS, this is often naturally done by assigning uninformative file names such as "*final_analysis_1_rev_more_changes.R*" which is bad practice as this is highly error prone, lacking transparency for collaborators, and changes are difficult to track and reconcile. Particularly in disciplines like pharmacoepidemiology, where analyses can have far reaching impact on healthcare policy and practice decisions, analytic code needs to be accessible and reproducible.

To increase the adoption of transparent and reproducible workflows in RWE studies using VCS, this tutorial aims to give a practical introduction for pharmacoepidemiologists on how to set up, structure, and implement workflows using *Git*, which is the most popular VCS to date.[@blischak2016] We will first give a brief introduction to Git and its usage for collaboration and dissemination of study results through project repositories. Then we will provide a technical step-by-step guidance on how to integrate Git in analytic RWE workflows. We will additionally discuss and showcase important aspects of reproducibility using the R open-source programming language, although the basic principles are applicable to any major coding language.

{{< pagebreak >}}

# Git in a nutshell

Git is a free and open source distributed VCS software which was developed in 2005 by the LINUX developer community primarily with the intent to handle large software projects efficiently.[@chacon2014pro] The way to conceptually think about how Git works is that it makes a *snapshot* of a research project repository every time the state of a project is saved and hence can be seen as a "*time machine*" that enables researchers and developers to compare code and repositories across different versions over time. For our purposes, a repository can be thought of as an isolated project directory which includes all necessary files and documents for a given research study ( e.g., protocol, programming code, manuscript, tables, figures, etc.).

In its basic form, Git is a local software and does not need any internet connectivity or connection to a remote server to store *local* changes made to files in a repository. However, to leverage the full potential of Git, it is almost always used in combination with web-based remote repository hosting services such as *GitHub*, *GitLab*, *Bitbucket* or other platforms (henceforth referred to as remote repositories, **Overview Box 1**).

::: callout-tip
## **Overview Box 1**. Differences between Git and remote repository platforms (GitHub, GitLab, etc.)

**Git**

-   Is an open-source software and distributed version control system

-   Generally operated through command line tools, graphical user interfaces are available

-   Installed locally on a system to track local changes of a Git repository

**Remote repository platforms (GitHub, GitLab, etc.)**

-   Web-based services, usually provided by a commercial entity

-   Usually free for basic functions, paid services for more advanced features

-   Needed to collaborate on shared repositories and dissemination of code

-   Offer a graphical user interface and other functionalities that complement basic Git functions
:::

These remote platforms make it possible to synchronize local Git repositories across multiple project members and thereby improve collaboration. They further complement Git functionalities by providing a graphical user interface (GUI) to visualize changes made to files and often offer advanced features such as the automation of workflows using continuous integration and deployment (CI/CD) or, most recently, AI-powered virtual coding assistants (e.g., GitHub co-pilot). Generally speaking, it's possible to use Git without a remote repository, while it's unusual to use a remote repository without Git.

# A step-by-step introduction on how to use Git in a RWE study

In this section, we want to give a technical introduction on how Git and remote repositories can be used in RWE studies. For the following examples, we focus on workflows utilizing the RStudio integrated development environment (IDE) GUI ([https://posit.co/download/rstudio-desktop/](https://posit.co/download/rstudio-desktop/https://posit.co/download/rstudio-desktop/)) and GitHub (<https://github.com/>) as a remote repository, although the general concepts are fairly similar and easily transferable to other programming languages and remote repository platforms, respectively. We will show examples for both command line interface (CLI) prompts as well as for RStudio's integrated GUI. For more details, we refer to the book *Pro Git* by Chacon and Straub.[@chacon2014pro]¬†

## Installing Git

Git is available for every contemporary operating system and can be downloaded on the official Git website: <https://git-scm.com/book/en/v2/Getting-Started-Installing-Git>.

To check if the installation succeeded, the following prompt in the CLI can be used, which will output the available version.

```{bash}
# check installed git version
git --version
```

## Configuration and first-time use

For Git to be able to track who made changes, the first step is to provide a name and email address as shown below. This needs to be done only once if the `--global` parameter is set.

```{bash}
# global configuration of name and email address
git config --global user.name "First Last"
git config --global user.email "name@domain.edu"
```

## Initialization of a new Git-controlled repository

### Local initialization

To start a new project (e.g., a new RWE study), the next step is to create and navigate to a new directory where all documents that are intended to be tracked via Git will be stored (in the following referred to as *repository*). In this example, the study repository is called `rwe_study`.

```{bash}
# create and navigate to study directory
mkdir ~/rwe_study
cd ~/rwe_study
```

The command to initialize this directory as a Git repository is

```{bash}
# initialize git tracking
git init
```

This initiates the creation of the `.git` sub-directory within the study repository which will contain the entire version history of the `rwe_study` project. Typically, users don't directly interact with this sub-directory and the only thing to keep in mind is that this folder keeps all files needed to track changes.

### GUI initialization and `git clone` {#sec-gui-initialization-and-git-clone}

An alternative to creating a new repository locally is through initiating a new project in the remote repository (in this case GitHub) and then creating a local copy, a process which is usually referred to as `cloning`.

To do so, users will need to log into their remote repository account and navigate to the section `New repository` (**Supplementary Figure 1**). This will take a user to a form to populate basic information of the new project such as the repository name (`rwe_study`) and choose basic settings such as if the repository should be private or public and if `README.md` (see @sec-repository-structure) and `.gitignore` (see @sec-stage-and-commit-changes and @sec-security) files should be automatically created (**Supplementary Figure 2**).

Now we can copy the pre-populated repository to our local machine by copy-pasting the link given under `Clone` \> `Copy HTTPS` into the CLI (**Supplementary Figure 3**):

```{bash}
# create and navigate to study directory and clone 
# the git repository which was already created on GitHub
mkdir ~/rwe_study
cd ~/rwe_study
git clone https://github.com/USER/rwe_study.git
```

This can also be achieved directly in the RStudio GUI via `File` \> `New Project` \> `Version Control` \> `Git` \> paste the link to `Repository URL` (@fig-RStudio-gui).

In case a users wants to join or contribute to an already existing project, `git clone` works the same way with the only difference that the repository already contains some files and is not empty.

## Repository structure, README file and licenses {#sec-repository-structure}

At this step, we now can populate the repository and start working on study-relevant files and analyses. To enhance clarity, it is recommended to use a logical structure and an informative nomenclature for sub-directories and file names (a minimal example is illustrated in @fig-structure).

All relevant metadata, instructions and information about a project should be documented in the `README.md` file. This file can be auto-generated when a project is initialized through a remote repository (see prior step in @sec-gui-initialization-and-git-clone) or can be manually added afterwards by creating a text file with the name `README.md` in the root directory of the repository. Essential information to include contain a brief summary about the project's background and objectives, instructions on how to install software or manage computation environments and dependencies, important files and the organization of the repository, contribution guidelines, contact information and the project's license to outline the terms under which others can use, modify, and distribute the project. Especially for open-source software projects choosing a suitable license is critical for which GitHub provides helpful guidance and information under <https://choosealicense.com/>.

A special aspect about real-world data, such as administrative insurance claims and electronic health records, is that these data are typically not collected for the primary purposes of doing research but rather for reasons of billing or clinical documentation. Hence, being transparent about the data provenance, pre-processing steps and operationalization of exposures, outcomes and covariates is of critical importance [@wang2017] and should be part of the repository's metadata. This can come in form of codebooks, data dictionaries, literate programming scripts (e.g., Quarto) or other applicable documentation files. Developing reproducible and well documented functions or packages as well as inline commenting of programming code can further enhance the transparency and readability of analytic code.[@bov√©2023improving]

To speed up these initial steps, we provide a pre-populated template of such a structured study repository based on the HARPER protocol[@wang2022] template under <https://gitlab-scm.partners.org/drugepi/harper>. HARPER is a harmonized study protocol template endorsed by the International Society of Pharmacoepidemiology and the International Society of Pharmacoeconomics and Outcomes Research. The pre-populated structured study repository template is publicly available and can be `forked`[@GitFork] to initiate a new project (see instructions in the template repository under the provided link).

## The git workflow

The most essential steps of a git workflow are summarized in @fig-workflow and in the **Supplementary Material**.

### Synchronize changes from a remote repository to a local repository (`pull`, `fetch`, `merge` and `rebase`) {#pull-fetch-merge}

Especially when working collaboratively with multiple users on a remote repository, it is usually good practice to synchronize the status of one's local repository and the remote repository before making any changes since there could be potential modifications and updates already made by others. To avoid any conflicts between two different versions and always work with the most recent version of a file, the first step of the git workflow involves a `git pull` or `git fetch` command.

-   `git fetch` downloads any changes made to a remote repository into a user's local repository. However, the command isolates the potentially modified files from the state of the existing local files. This is useful since it enables users to safely review changes using `git log` (we will cover this in more detail in @sec-tracking-changes) before integrating those locally. To eventually allow the integration of these changes locally, users can do so using the `git merge` or `git rebase` command. The difference between these two commands is how the history of the versions between different snapshots of the repository is tracked, for which `git merge` is more common, simpler and less error-prone and `git rebase` is a more advanced feature (for the purpose of this manuscript we will mostly focus on `git merge`).

```{bash}
# fetch ("download") updated version of a remote repository
git fetch 

# use merge to integrate these changes into local files using merge
git merge
```

-   `git pull` combines `git fetch` and `git merge` in one command and directly downloads [and]{.underline} integrates all changes from a remote repository locally.

```{bash}
# download and integrate content from remote to local
git pull
```

Occasionally it can occur that two collaborators made conflicting changes to the same file or even to the same line of code. While Git is generally good at automatically integrating (`merging`) new changes, Git will notify the user to resolve a major conflict by editing the conflicting file if Git cannot automatically determine what is correct (e.g., if one collaborator has made changes to a line of code and the other completely deleted it).

### Stage and commit changes {#sec-stage-and-commit-changes}

Git allows researchers to keep track of changes by making snapshots of the repository every time the state of a project is saved. In Git terms, this fundamental step is referred to as a `commit` and it enables users to compare code versions across snapshots. Generally, it is up to the user when to commit, which files to commit and how the commit should be documented in a `commit message`. However, it is best practice to *commit early and often*. That is, smaller and more granular commits that reflect a single unit of work (e.g., a change of selected confounders to adjust for) make it easier to comprehend the changes and associated analytic results and revert potential errors.

To determine which files should be selected (or `staged`) for a new commit, the `git add` command is used followed by the name(s) of the files that should be committed or a '`.'` to stage all changes present in the current repository.

```{bash}
# Examplary staging command
git add 'scripts/03_propensity_score_analysis.R'
```

Once all files that should be committed in the same step are staged, the `git commit` command will create a local snapshot of the changes. The `-m` suffix and quoted text after the command represent the commit message, i.e., an informative yet brief comment on what changes were performed.

```{bash}
# Examplary commit command
git commit -m 'added title to plot illustrating propensity score overlap'
```

Every time a user makes a commit to create a snapshot of the work, `Git` creates a unique hash (a 40-character string created by a **simple hashing algorithm** \[SHA\]) which can be seen as an "ID" of the snapshot which enables users to comprehend every change made and revert back to any snapshot of the repository. @fig-stage-commit-RStudio-gui illustrates the equivalent steps in the RStudio GUI.

If any file(s) in the study repository should not be tracked and hence not be synchronized with the remote repository (e.g., because they include confidential information that should not be visible to others like database credentials), these can be specified in the `.gitignore` file which is typically located in the root directory of the repository. To create a `.gitignore` file, a user can either auto-generate it upon initialization of the repository on GitHub (**Supplementary Figure 2**) or manually add a text file called `.gitignore` to the root directory (more information in @sec-security).

### Tags (`tag`) {#sec-tags}

A handy `Git` feature to highlight particularly important commits, snapshots, code/software releases or milestones of a project is `tagging`. In context of RWE studies, this can be a specific version of an analysis, e.g., the one used for a regulatory submission or the completion of a manuscript version or revision.

Tags can be annotated with a semantic identifier and tag message, e.g.,

```{bash}
git tag -a v2.0 -m "Revised (R1) manuscript version"
```

All created tags can be displayed using the following command:

```{bash}
git tag
```

## Synchronize changes with remote repository

### Synchronize local changes to remote (`push`)

To synchronize the local changes, the next step involves the upload of our commits to the remote repository on GitHub via the `push` command.

```{bash}
# push local changes to remote repository
git push
```

In case we initialized the local repository as described in section @sec-gui-initialization-and-git-clone, a remote was automatically configured. This can be checked via the following command.

```{bash}
# check remote configuration
git remote -v
```

If there is no remote established yet, this can be retrospectively configured using the following commands.

```{bash}
# add a new remote repository connection
git remote add origin https://github.com/USER/rwe_study.git
git branch -M main
git push -u origin main
```

Tags, as described in @sec-tags, need to be separately pushed, e.g.,

```{bash}
git push origin v2.0
```

In summary, `git push` is not needed if the intention of a researcher is just to keep track of local changes and there is no wish to share code, collaborate with others or work across different systems. However, most of the times researchers use `Git` particularly for the purpose of collaborating on a project as depicted in @fig-collaborate.

## Tracking changes {#sec-tracking-changes}

One of the main motivations to adhere to this workflow is that in return we get rewarded with a detailed audit trail of changes made to our study files. Probably the best way to visualize and track changes is by browsing the `commit history` on the remote repository. @fig-GitHub-gui_changes illustrates this for the example commit we have previously performed in @sec-stage-and-commit-changes. A similar view for uncommitted changes in the RStudio GUI is also provided in @fig-stage-commit-RStudio-gui.

For completeness, tracking uncommitted changes is also possible via the command line, but usually provides the user with a less intuitive output compared to what is visually provided by RStudio and GitHub.

```{bash}
# display differences between uncommitted changes
git diff
```

A complete summary of committed changes with details on the SHA hash, author, email, time and commit messages can be accessed via

```{bash}
# display commit history
git log
```

While there are many more useful `Git` features such as `branching` (see **Supplementary Material**), the workflow of staging, committing and pushing/pulling (@fig-workflow) may already suffice for the majority of pharmacoepidemiologists.

## Creating persistent identifiers

A cornerstone of FAIR principles is the use of persistent identifiers, such as digital object identifiers (DOI), for enabling findability and accessibility of research objects. Integrating the concept of persistent identifiers within the context of remote repositories is an important aspect to enhance the traceability and accessibility of code repositories or even specific commits or releases of a study codebase.

To that end, Zenodo[@europeancommission.directorategeneralforresearchandinnovation.2019; @zenodo], a free and open-source platform funded by the European Commission and developed and maintained by European Organization for Nuclear Research (CERN), allows users to share diverse research artifacts. The platform seamlessly interfaces with GitHub, enabling the creation of referenceable DOIs for existing code repositories. The steps required to obtain a DOI involve the linkage of a Zenodo and a GitHub account[@zenodoGitHub]. Once linked, a user will be able to select a specific release of a repository which automatically registers a new DOI and a corresponding badge which can be included and referenced in a GitHub README file.

## Security considerations {#sec-security}

When working with Git and remote repositories, several security considerations are crucial to safeguard sensitive information. First, it is of utmost importance to ensure that sensitive information (such as personal access tokens, passwords or patient-level data) are not accidentally shared. One way to prevent this is to configure a `.gitignore` file, which is a flat text file typically stored in the root directory of the repository. Each line in `.gitignore` specifies a file name, sub-directory name or a file name pattern (e.g., "\*.csv" for all files of type csv) that a user intentionally does not want to track and synchronize with a remote repository. If it can be avoided, such sensitive information should alternatively not be stored in the project directory in the first place.

```{bash}
# Example .gitgnore file specyfing which 
# files, sub-directories and patterns
# that should not be tracked

# password .txt file
pwd.txt

# Session Data files
.RData
.Rhistory

# any type of .csv file
*.csv

# output directory
output/

# .Renviron file
.Renviron
```

Second, it is good practice to not include passwords or personal access tokens inside an analytic code file but to call these from an external file. RStudio, for example, offers the possibility to create environment files (`.Renviron` and `.RProfile`) which are user-controllable text files which can be stored in the project root directory and is automatically called upon an R session start. Such a file can be configured to not be tracked using `.gitignore` (as illustrated above) and accessed as show in the following.

```{r}
# Example: configuration of database access credentials inside an .Renviron file
db_username = "JoshSmith"
db_password = "User1234"
```

These credentials can now be called inside an R script, for example, to access a database (example taken from `genieBPC` R package [@lavery2022]).

```{r}
# Example how the credentials defined in .Renviron can be used
# inside an R script
set_synapse_credentials(
  username = Sys.getenv("db_username"), 
  password = Sys.getenv("db_password")
  )
```

Third, it needs to be ensured that access permissions to remote repository platforms are appropriately configured, granting only necessary access levels to collaborators unless it is intended to share the repository with the public. All major remote repositories offer the option to configure a repository to be private or public.

# Discussion

In this practical tutorial, we introduced basic concepts of VCS for transparent and reproducible workflows and gave technical step-by-step instructions for the implementation using `Git` and R. We discussed frequently occurring challenges for reproducibility and how these can be overcome.

`Git` is a powerful tool that perfectly integrates into workflows of quantitative disciplines handling analytic code. It further provides features that make it convenient for project-oriented setups and collaboration at scale. This tutorial is by no means comprehensive as `Git` provides a vast number of additional features which were not addressed in this manuscript. To get familiar with more advanced `Git` usage, we compiled a non-exhaustive list of further suggested readings and resources in the **Supplementary Material**.

Besides the usage of `Git` and remote repositories as version control systems, there are also further relevant aspects that determine the reproducibility of analytic code when using open-source software such as R. To complement the introduction and discussion on `Git` in this manuscript, section 2 (*Reproducible computation environments in R*) in the **Supplementary Material** provides a few further considerations addressing the computational reproducibility when using R.

`Git` was primarily designed to work with source code files and works best for plain, text-based documents such as programming code, rich text format (RTF), Markdown or LaTex files. There are limitations when it comes to tracking binary files like Word (.docx) and Excel (.xlsx) as these need to be interpreted by a program or a hardware processor.[@blischak2016] While it can be still useful to track versions of these file types using `Git`, it is important to recognize that modifications in such documents can't be easily inspected using RStudio or GitHub.

Despite the potential initial complexities to get acquainted with the `Git` workflow, distributed VCS and code sharing provide unique advantages, such as a full audit trail of which changes were made by whom, when and why. Remote repositories are ideal platforms to deploy and archive scripts and documents, facilitate collaboration and make it very convenient to share code. While the access to the final version of the programming code is already sufficient for external reproducibility, the tracking of changes over time enables a study team to comprehend and resolve errors more efficiently. Similar to tracking changes and amendments of a study protocol, an external audience also benefits from a complete audit trail through a better understanding of the documented scientific rationale behind specific changes, the identification of implemented quality control processes (e.g., code reviews) and the tracking of contributions of different collaborators to the codebase.

Although data sharing is unfortunately often prohibited due to privacy and legal reasons, many databases have been mapped to common data models like OMOP[@ohdsi2019book], Sentinel[@brown2020], PCORnet[@fleurence2014] and ConcePTION [@thurin2021], which makes shared code interoperable even without direct access to the same data source. In order to achieve full replicability, authors may alternatively include a sample of dummy data to enable readers to comprehend and run the analytic code. Moreover, many larger research data sources have already provided synthetic data using identical formats and variable names while protecting patient privacy (e.g., Medicare Claims Synthetic Public Use Files).[@gonzales2023]

Finally, code sharing can enable researchers to learn from each other, build trust[@orsini2020], expedite the uptake of novel methodologies and knowledge exchange and decrease unnecessary redundancies through sharing of code libraries, functions and algorithms. `Git` was primarily designed for version control and development of analytic code by statisticians and programmers, but may also benefit other members of a RWE generation team through the centralized deployment, tracking and version control of study documents as well as project management tools which have become standard among established remote repository platforms. While `Git` offers substantial benefits for collaboration, reproducibility, and transparency in RWE teams, challenges can arise in its adoption, particularly related to merging conflicts, steep learning curves, and maintaining consistent usage practices across team members.

Regulators[@fdaRWE2021], funding agencies[@NIH2023; @PCORI2023] and HTA bodies[@kent2021] have increasing expectations regarding the provenance, sharing and audit trial of study documents including analytic code as a prerequisite for impactful and credible RWE studies. Given the trend towards open source tools for clinical trial reporting and regulatory submissions, this tutorial addresses a timely topic and hopefully encourages new and experienced pharmacoepidemiologists to integrate VCS in their daily work and embrace the advantages of FAIR analytic code sharing.

{{< pagebreak >}}

# References {.unnumbered}

::: {#refs}
:::

{{< pagebreak >}}

# Figures {.unnumbered}

```{r}
#| label: fig-RStudio-gui
#| fig-cap: "Steps to clone a remote repository using the RStudio integrated development environment (IDE) graphical user interface (GUI)."
#| eval: true
#| echo: false
#| out-width: 50%
knitr::include_graphics(here::here("figures", "Figure_1_RStudio_init.png"))
```

{{< pagebreak >}}

```{r}
#| label: fig-structure
#| fig-cap: "Minimal example of a transparent repository structure containing relevant study documents. Abbreviations: .git = Git sub-directory which includes all files to keep track of changes (created as a result of git init command), renv = R environment sub-directory which contains the project library and other project-specific files and settings needed to manage R package versions and the R environment, renv.lock = R environment lockfile, describing the R version and R package versions used in a project, *.qmd = Markdown-specific format based on the Quarto open-source scientific and technical publishing system."
#| eval: true
#| echo: false
#| out-width: 60%
knitr::include_graphics(here::here("figures", "Figure_2_repo_structure.png"))
```

{{< pagebreak >}}

```{r}
#| label: fig-workflow
#| fig-cap: "Overview of a basic Git workflow."
#| eval: true
#| echo: false
knitr::include_graphics(here::here("figures", "Figure_3_workflow.png"))
```

{{< pagebreak >}}

```{r}
#| label: fig-stage-commit-RStudio-gui
#| fig-cap: "The RStudio integrated development environment (IDE) provides a graphical user interface (GUI) as an alternative to command line prompts to interact with Git and to perform command equivalent to git add, git commit and git push/pull (red circles). This view can be accessed in the right upper pane of the RStudio IDE under Git > Diff. In this example, an R script with the title '03_propensity_score_analysis.R' is selected and staged. All changes performed in this file can be viewed in the window below with green highlighted lines indicating additions and red highlighted lines deletions from the prior version. In this example, a title was added to a propensity score plot which is also expressed in the commit message."
#| eval: true
#| echo: false
knitr::include_graphics(here::here("figures", "Figure_4_stage_commit.png"))
```

{{< pagebreak >}}

```{r}
#| label: fig-collaborate
#| fig-cap: "Git in connection with remote repositories (e.g., GitHub or GitLab) can signficantly improve collaboration across project members."
#| eval: true
#| echo: false
knitr::include_graphics(here::here("figures", "Figure_5_collaboration.png"))
```

{{< pagebreak >}}

```{r}
#| label: fig-GitHub-gui_changes
#| fig-cap: "Remote repositories like GitHub provide tools to visually track changes made to analytical code and corresponding output such as figures. This commit history illustrates details about the commit (e.g., commit SHA [simple hasing algorithm] and message), a side-by-side comparison of the previous (upper left) and modified (upper right) version of the figure and the corresponding changes made to the R code (bottom; line 32 in the code script was added). The unique abbreviated SHA token for this specific change/commit is '9b1a94c' (see 'Commit SHA token' box on the upper right of the figure)."
#| eval: true
#| echo: false
#| out-width: 100%

knitr::include_graphics(here("figures", "Figure_6_commit_Github_gui.png"))
```
